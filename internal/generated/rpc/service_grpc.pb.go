// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/service.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentStatusClient is the client API for AgentStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentStatusClient interface {
	UserSetStatus(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserSetStatusResponse, error)
	UserGetLog(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserGetLogResponse, error)
}

type agentStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentStatusClient(cc grpc.ClientConnInterface) AgentStatusClient {
	return &agentStatusClient{cc}
}

func (c *agentStatusClient) UserSetStatus(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserSetStatusResponse, error) {
	out := new(UserSetStatusResponse)
	err := c.cc.Invoke(ctx, "/rpc.AgentStatus/userSetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentStatusClient) UserGetLog(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserGetLogResponse, error) {
	out := new(UserGetLogResponse)
	err := c.cc.Invoke(ctx, "/rpc.AgentStatus/userGetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentStatusServer is the server API for AgentStatus service.
// All implementations must embed UnimplementedAgentStatusServer
// for forward compatibility
type AgentStatusServer interface {
	UserSetStatus(context.Context, *UserRequest) (*UserSetStatusResponse, error)
	UserGetLog(context.Context, *UserRequest) (*UserGetLogResponse, error)
	mustEmbedUnimplementedAgentStatusServer()
}

// UnimplementedAgentStatusServer must be embedded to have forward compatible implementations.
type UnimplementedAgentStatusServer struct {
}

func (UnimplementedAgentStatusServer) UserSetStatus(context.Context, *UserRequest) (*UserSetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetStatus not implemented")
}
func (UnimplementedAgentStatusServer) UserGetLog(context.Context, *UserRequest) (*UserGetLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetLog not implemented")
}
func (UnimplementedAgentStatusServer) mustEmbedUnimplementedAgentStatusServer() {}

// UnsafeAgentStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentStatusServer will
// result in compilation errors.
type UnsafeAgentStatusServer interface {
	mustEmbedUnimplementedAgentStatusServer()
}

func RegisterAgentStatusServer(s grpc.ServiceRegistrar, srv AgentStatusServer) {
	s.RegisterService(&AgentStatus_ServiceDesc, srv)
}

func _AgentStatus_UserSetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentStatusServer).UserSetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AgentStatus/userSetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentStatusServer).UserSetStatus(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentStatus_UserGetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentStatusServer).UserGetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.AgentStatus/userGetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentStatusServer).UserGetLog(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentStatus_ServiceDesc is the grpc.ServiceDesc for AgentStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AgentStatus",
	HandlerType: (*AgentStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userSetStatus",
			Handler:    _AgentStatus_UserSetStatus_Handler,
		},
		{
			MethodName: "userGetLog",
			Handler:    _AgentStatus_UserGetLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
